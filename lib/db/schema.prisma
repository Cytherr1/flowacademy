generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id           Int      @id @default(autoincrement())
  userId       String
  project_name String   @db.VarChar(100)
  created_at   DateTime @default(now()) @db.Timestamp(0)
  description  String
  reports      Report[]
  video        Video?
  user         User     @relation(fields: [userId], references: [id])
  activities   Rows[]

  @@index([userId], map: "Workspace_userId_fkey")
}

model Video {
  id          Int       @id @default(autoincrement())
  workspaceId Int       @unique
  file_path   String    @db.VarChar(255)
  upload_time DateTime  @default(now()) @db.Timestamp(0)
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Report {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId], map: "Report_workspaceId_fkey")
}

model Log {
  id               Int      @id @default(autoincrement())
  action_name      String   @db.VarChar(50)
  action_source    String   @db.VarChar(50)
  action_timestamp DateTime @db.Timestamp(0)
  description      String   @db.VarChar(50)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account?
  Authenticator Authenticator[]
  sessions      Session?
  workspaces    Workspace[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Rows {
  id            Int       @id @default(autoincrement())
  workspaceId   Int
  activityNo    Int
  activityName  String    @db.VarChar(255)
  distance      Float     @default(0)
  time          Float     @default(0)
  symbolIndex   Int?
  remarks       String?   @db.VarChar(255)
  createdAt     DateTime  @default(now()) @db.Timestamp(0)
  updatedAt     DateTime  @updatedAt
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
}
