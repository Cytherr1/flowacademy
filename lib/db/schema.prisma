generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id    Int   @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId   String  
  video   Video?
  reports   Report[]
  project_name    String    @db.VarChar(100)
  created_at    DateTime    @default(now()) @db.Timestamp()
}

model Video {
  id    Int   @id @default(autoincrement())
  workspace  Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId   Int   @unique
  file_path    String    @db.VarChar(255)
  upload_time    DateTime    @default(now()) @db.Timestamp()
}

model Report {
  id    Int   @id @default(autoincrement())
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId   Int
  created_at    DateTime    @default(now()) @db.Timestamp()
}

model Log {
  id    Int   @id @default(autoincrement())
  action_name   String    @db.VarChar(50)
  action_source   String    @db.VarChar(50)
  action_timestamp    DateTime   @db.Timestamp()
  description   String    @db.VarChar(50)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  Authenticator Authenticator[]
 
  workspaces   Workspace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}